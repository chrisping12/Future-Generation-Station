I still keep getting this output. 

Teams playing today: {1610612743, 1610612746, 1610612747, 1610612749, 1610612750, 1610612752, 1610612754, 1610612765}
[✓] 6 players from your list have games today.
[!] Prediction error: 'numpy.float64' object cannot be interpreted as an integer
[!] Prediction error: 'numpy.float64' object cannot be interpreted as an integer
[!] Prediction error: 'numpy.float64' object cannot be interpreted as an integer
[!] Prediction error: 'numpy.float64' object cannot be interpreted as an integer
[!] Prediction error: 'numpy.float64' object cannot be interpreted as an integer
[!] Prediction error: 'numpy.float64' object cannot be interpreted as an integer
            PLAYER_NAME   GAME_DATE  predicted_points  floored_prediction
491       Jalen Brunson  2025-04-11               NaN                 NaN
709           Josh Hart  2025-04-11               NaN                 NaN
431  Karl-Anthony Towns  2025-04-10               NaN                 NaN
637       Mikal Bridges  2025-04-13               NaN                 NaN
768       Miles McBride  2025-04-13               NaN                 NaN
560          OG Anunoby  2025-04-11               NaN                 NaN
[✓] Today's predictions saved to 'today_predictions.csv'

Here is the code I have entered:

# ============================================
# Define safe functions
def inv(x):
    return 1.0 / x if x != 0 else 0

# === Your best PySR frozen expression ===
def predict_points(row):
    try:
        adjusted_shot_creation = row['adjusted_shot_creation']
        delta_fga_vs_rolling = row['delta_fga_vs_rolling']
        fg_pct_vs_avg_delta = row['fg_pct_vs_avg_delta']
        rolling_pts_from_ft_5g = row['rolling_pts_from_ft_5g']
        rolling_usg_pct_5G = row['rolling_usg_pct_5G']
        volume_efficiency_to_pts = row['volume_efficiency_to_pts']

        result = np.ceil(
            (
                (
                    fg_pct_vs_avg_delta
                    * (
                        adjusted_shot_creation
                        + np.max(
                            (
                                (rolling_usg_pct_5G ** -0.6628592)
                                / inv(volume_efficiency_to_pts)
                            )
                            - round(
                                inv(
                                    np.exp(
                                        -2.7052715
                                        + np.min(
                                            delta_fga_vs_rolling - -0.8848275,
                                            (0.76128376 ** (rolling_pts_from_ft_5g - -0.15936984))
                                            / inv(np.sqrt(adjusted_shot_creation))
                                        )
                                    )
                                ),
                                0
                            )
                        )
                        * delta_fga_vs_rolling
                    )
                ) ** 0.8927275
                + -0.08081033
            )
            * 0.9920129
        )
        return result
    except Exception as e:
        print(f"[!] Prediction error: {e}")
        return np.nan

def floor_to_nearest_5(x):
    return np.floor(x / 5) * 5

def get_today_team_ids():
    today = datetime.today().strftime('%Y-%m-%d')
    games = scoreboardv2.ScoreboardV2(game_date=today).get_normalized_dict()
    team_ids = set()
    for game in games['GameHeader']:
        team_ids.add(game['HOME_TEAM_ID'])
        team_ids.add(game['VISITOR_TEAM_ID'])
    return team_ids

# ============================================
