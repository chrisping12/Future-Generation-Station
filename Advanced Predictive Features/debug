Good — this actually gives us exactly the answer.

This error:

TypeError: Could not convert string 'CHACHACHACHACHACHACHACHACHACHACHACHACHACHACHACHACHACHACHACHACHA' to numeric

means that when you tried to .groupby('GAME_DATE').mean(), Pandas tried to average a string column — which of course it can’t do.

⸻

✅ What’s happening:
	•	Your _team_stats_df has non-numeric columns like maybe:
	•	Player names (PLAYER_NAME)
	•	Team names
	•	MATCHUP string
	•	Other text fields
	•	When you .mean() without restricting to numeric-only columns, it tries to average everything, and strings crash it.

⸻

✅ Solution:

You need to select only the numeric columns before grouping and averaging.

Here’s the fixed version of get_team_rolling_avg:

def get_team_rolling_avg(team_id, current_game_date, stat_col, window=5):
    if _team_stats_df is None:
        raise RuntimeError("Team stats not loaded. Call load_team_stats() first.")

    df = _team_stats_df.copy()

    # Filter for the right team
    df = df[df['TEAM_ID'] == team_id]

    # Only keep numeric columns + GAME_DATE
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    numeric_cols += ['GAME_DATE']  # Keep GAME_DATE for grouping
    df = df[numeric_cols]

    # Group by GAME_DATE and average
    df = df.groupby('GAME_DATE').mean().reset_index()

    # Filter games before current
    df = df[df['GAME_DATE'] < pd.to_datetime(current_game_date)]
    df = df.sort_values('GAME_DATE')

    if stat_col not in df.columns or df.empty:
        return np.nan

    return df[stat_col].tail(window).mean()



⸻

✅ Key changes:
	•	select_dtypes(include=[np.number]) picks only numeric columns like:
	•	TEAM_BLK
	•	TEAM_STL
	•	TEAM_PF
	•	TEAM_OFF_RATING
	•	etc.
	•	Then we groupby('GAME_DATE') only on safe numeric columns.
	•	No crashing on strings anymore.

⸻

✅ Summary:

Before	After Fix
Pandas tried to .mean() non-numeric string fields	Now only averages numeric team stats
Crashes with TypeError	Works cleanly with rolling averages



⸻

✅ Bonus Tip:

You might also want to remove duplicate GAME_DATE rows after grouping if weird duplication happens.
But if your game logs are clean, this fix is enough.

⸻

Would you like me to show you a one-line visualization where you can plot how a team’s rolling blocks, steals, fouls behave over the season?

Takes like 10 seconds and you can instantly see if rolling_opp_blocks_5g is behaving correctly after this fix.
Want it? (yes/no)