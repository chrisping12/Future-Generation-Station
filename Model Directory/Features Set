Feature-Set

'Player_ID'
'GAME_DATE'
'TEAM_ID'
'OPP_TEAM_ID'
'HOME_AWAY'
'rolling_pts_avg_5G'
'rolling_pts_median_5G'
'rolling_3pm_avg_5G'
'rolling_3pm_median_5G'
'rolling_min_avg_5G'
'pts_consistency_score'
'rest_days'
'is_b2b'
'rolling_opp_def_rating_5G'
'rolling_opp_ast_pct_5G'
'rolling_team_off_rating_5G'
'rolling_team_reb_pct_5G'
'team_pace'
'opp_pace'
'rolling_team_ast_pct_5G'
'rolling_opp_reb_pct_5G'
'latest_team_e_off_rating'
'latest_opp_e_def_rating'
'adjusted_pts_proj_def'
'adjusted_pts_proj_usg'
'rolling_usg_pct_5G'
'rolling_e_usg_pct_5G'
'rolling_fg_pct_5G'
'rolling_fg3_pct_5G'
'rolling_fga_5G'
'delta_pts_vs_rolling'
'delta_min_vs_rolling'
'delta_fga_vs_rolling'
'opp_def_trend_delta'
'fg_pct_vs_avg_delta'
'shots_per_min'
'pts_per_fga'
'pts_per_min'
'pts_to_3pm_ratio'
'pts_trend_slope_5G'
'is_volume_shooter'
'is_trending_up'
'is_trending_down'
'high_efficiency'
'rolling_ast_pct_5G'
'rolling_oreb_pct_5G'
'rolling_dreb_pct_5G'
'rolling_reb_pct_5G'
'rolling_poss_5g'
'ast_to_poss_ratio'
'usg_to_poss_ratio'
'engagement_index'
'volume_efficiency_ratio'
'starts_as_C'
'starts_as_G'
'starts_as_F'
'is_starter'


Perfect. Here’s a roadmap to cleanly integrate those features into your pipeline:

⸻

1. Extend team_adv_tracker.py

Add this to your loop in build_team_adv_dataset() to pull from BoxScoreTraditionalV3:

from nba_api.stats.endpoints import boxscoretraditionalv3

# After your advanced stats call
box = boxscoretraditionalv3.BoxScoreTraditionalV3(game_id=game_id)
team_traditional = box.get_data_frames()[1]  # Team stats

team_traditional = team_traditional[['TEAM_ID', 'BLK', 'STL', 'PF']]
team_traditional.columns = ['TEAM_ID', 'TEAM_BLK', 'TEAM_STL', 'TEAM_PF']

team_stats = pd.merge(team_stats, team_traditional, on='TEAM_ID', how='left')

Then engineer these rolling features later in your FeatureBuilder:
	•	rolling_opp_blocks_5g
	•	rolling_opp_steals_5g
	•	rolling_opp_fouls_5g

⸻

2. Extend player_adv_tracker.py

In each loop of build_player_adv_dataset():

from nba_api.stats.endpoints import boxscoretraditionalv3, boxscorehustlev2, boxscoreplayertrackv2, boxscoremiscv2

# Traditional for points by type
box = boxscoretraditionalv3.BoxScoreTraditionalV3(game_id=game_id)
player_trad = box.get_data_frames()[0]
player_trad['PTS_3'] = player_trad['FG3M'] * 3
player_trad['PTS_2'] = (player_trad['FGM'] - player_trad['FG3M']) * 2
player_trad['PTS_FT'] = player_trad['FTM']

# Hustle stats
hustle = boxscorehustlev2.BoxScoreHustleV2(game_id=game_id).get_data_frames()[0]
hustle = hustle[['PLAYER_ID', 'LOOSE_BALLS_RECOVERED', 'SCREEN_ASSISTS']]

# Player tracking
track = boxscoreplayertrackv2.BoxScorePlayerTrackV2(game_id=game_id).get_data_frames()[0]
track = track[['PLAYER_ID', 'TCHS']]

# Misc (for transition points)
misc = boxscoremiscv2.BoxScoreMiscV2(game_id=game_id).get_data_frames()[0]
misc = misc[['PLAYER_ID', 'PTS_FB']]

# Merge everything
merged = player_trad.merge(hustle, on='PLAYER_ID', how='left') \
                    .merge(track, on='PLAYER_ID', how='left') \
                    .merge(misc, on='PLAYER_ID', how='left')



⸻

3. Add is_weekend_game Feature

In FeatureBuilder._calculate_rolling_features():

is_weekend_game = int(current_game['GAME_DATE'].weekday() >= 5)



⸻

4. Rolling Logic in FeatureBuilder

Add rolling logic:

rolling_pts_from_3_5g = past_games['PTS_3'].mean()
rolling_pts_from_2_5g = past_games['PTS_2'].mean()
rolling_pts_from_ft_5g = past_games['PTS_FT'].mean()
rolling_looseball_rec_5g = past_games['LOOSE_BALLS_RECOVERED'].mean()
rolling_screen_ast_5g = past_games['SCREEN_ASSISTS'].mean()
touches_to_pts_ratio = past_games['PTS'].sum() / max(past_games['TCHS'].sum(), 1)
transition_pts_pct = past_games['PTS_FB'].sum() / max(past_games['PTS'].sum(), 1)



⸻

Would you like the updated row = {} dictionary line with all these new keys preformatted too?